set.seed(10)
y7<- rnorm(n=12, mean=28, sd=9) #excess turbulence
set.seed(10)
#y30<-rnorm(n=24, mean=28, sd=8) #wildlife strike
set.seed(10)
y9<-rnorm(n=24, mean=28, sd=6)
set.seed(10)
y10<-rnorm(n=50, mean=30, sd=4.5)
set.seed(10)
df.labels <- data.frame(x=c(1,2,4,6,7,9,10), y=c(0,20,5,7.5,13,14,19), label=c("Landing on\nHudson","Engine\nfailure","Laser\nblindness","Lightning","Excess\nturbulence","Wildlife\nstrike","Passenger\ndisturbance"))
df.plot <- data.frame(y=c(y1,y2,NA,y4,NA,y6,y7,NA,y9,y10), x=factor(c(rep(1,12),rep(2,60),3,rep(4,12),5,rep(6,15),rep(7,12),8,rep(9,24),rep(10,50))))
ggplot() + geom_boxplot(data=df.plot, aes(x,y)) +
geom_label(data=df.labels, aes(x,y,label=label), fontface="bold") +
geom_rect(aes(xmin=-Inf, xmax=Inf, ymin=25, ymax=Inf), alpha = I(0.2), fill="#4b2e83") +
scale_x_discrete(breaks=c(1,5,10), labels=c("1"="Low", "5"="Medium", "10"="High")) +
theme_bw(base_size = 40) + theme(panel.grid.major = element_blank()) + ylab("Human Pilot\nPreparedness") +
xlab("Probability of Event Occurence")
library(ggplot2)
set.seed(10)  #setting a seed will ensure you have reproducible results each time.
y1<- rnorm(n=12, mean=18, sd=15)  #landing on hudson
y2<-rnorm(n=60, mean=30, sd=4) #engine failure
y4<-rnorm(n=12, mean=23, sd=11)  #laser blindness
set.seed(10)
y6<- rnorm(n=15, mean=23, sd=9) #lightning
set.seed(10)
y7<- rnorm(n=12, mean=28, sd=9) #excess turbulence
set.seed(10)
#y30<-rnorm(n=24, mean=28, sd=8) #wildlife strike
set.seed(10)
y9<-rnorm(n=24, mean=28, sd=6)
set.seed(10)
y10<-rnorm(n=50, mean=30, sd=4.5)
set.seed(10)
df.labels <- data.frame(x=c(1,2,4,6,7,9,10), y=c(0,20,5,7.5,13,14,19), label=c("Landing\non Hudson","Engine\nfailure","Laser\nblindness","Lightning","Excess\nturbulence","Wildlife\nstrike","Passenger\ndisturbance"))
df.plot <- data.frame(y=c(y1,y2,NA,y4,NA,y6,y7,NA,y9,y10), x=factor(c(rep(1,12),rep(2,60),3,rep(4,12),5,rep(6,15),rep(7,12),8,rep(9,24),rep(10,50))))
ggplot() + geom_boxplot(data=df.plot, aes(x,y)) +
geom_label(data=df.labels, aes(x,y,label=label), fontface="bold") +
geom_rect(aes(xmin=-Inf, xmax=Inf, ymin=25, ymax=Inf), alpha = I(0.2), fill="#4b2e83") +
scale_x_discrete(breaks=c(1,5,10), labels=c("1"="Low", "5"="Medium", "10"="High")) +
theme_bw(base_size = 40) + theme(panel.grid.major = element_blank()) + ylab("Human Pilot\nPreparedness") +
xlab("Probability of Event Occurence")
library(ggplot2)
set.seed(10)  #setting a seed will ensure you have reproducible results each time.
y1<- rnorm(n=12, mean=18, sd=15)  #landing on hudson
y2<-rnorm(n=60, mean=30, sd=4) #engine failure
y4<-rnorm(n=12, mean=23, sd=11)  #laser blindness
set.seed(10)
y6<- rnorm(n=15, mean=23, sd=9) #lightning
set.seed(10)
y7<- rnorm(n=12, mean=28, sd=9) #excess turbulence
set.seed(10)
#y30<-rnorm(n=24, mean=28, sd=8) #wildlife strike
set.seed(10)
y9<-rnorm(n=24, mean=28, sd=6)
set.seed(10)
y10<-rnorm(n=50, mean=30, sd=4.5)
set.seed(10)
df.labels <- data.frame(x=c(1,2,4,6,7,9,10), y=c(0,20,5,7.5,13,14,19), label=c("Landing\n on Hudson","Engine\nfailure","Laser\nblindness","Lightning","Excess\nturbulence","Wildlife\nstrike","Passenger\ndisturbance"))
df.plot <- data.frame(y=c(y1,y2,NA,y4,NA,y6,y7,NA,y9,y10), x=factor(c(rep(1,12),rep(2,60),3,rep(4,12),5,rep(6,15),rep(7,12),8,rep(9,24),rep(10,50))))
ggplot() + geom_boxplot(data=df.plot, aes(x,y)) +
geom_label(data=df.labels, aes(x,y,label=label), fontface="bold") +
geom_rect(aes(xmin=-Inf, xmax=Inf, ymin=25, ymax=Inf), alpha = I(0.2), fill="#4b2e83") +
scale_x_discrete(breaks=c(1,5,10), labels=c("1"="Low", "5"="Medium", "10"="High")) +
theme_bw(base_size = 40) + theme(panel.grid.major = element_blank()) + ylab("Human Pilot\nPreparedness") +
xlab("Probability of Event Occurence")
library(ggplot2)
set.seed(10)  #setting a seed will ensure you have reproducible results each time.
y1<- rnorm(n=12, mean=18, sd=15)  #landing on hudson
y2<-rnorm(n=60, mean=30, sd=4) #engine failure
y4<-rnorm(n=12, mean=23, sd=11)  #laser blindness
set.seed(10)
y6<- rnorm(n=15, mean=23, sd=9) #lightning
set.seed(10)
y7<- rnorm(n=12, mean=28, sd=9) #excess turbulence
set.seed(10)
#y30<-rnorm(n=24, mean=28, sd=8) #wildlife strike
set.seed(10)
y9<-rnorm(n=24, mean=28, sd=6)
set.seed(10)
y10<-rnorm(n=50, mean=30, sd=4.5)
set.seed(10)
df.labels <- data.frame(x=c(1,2,4,6,7,9,10), y=c(0,20,5,7.5,13,14,19), label=c("Landing\n on Hudson","Engine\nfailure","Laser\nblindness","Lightning","Excess\nturbulence","Wildlife\nstrike","Passenger\ndisturbance"))
df.plot <- data.frame(y=c(y1,y2,NA,y4,NA,y6,y7,NA,y9,y10), x=factor(c(rep(1,12),rep(2,60),3,rep(4,12),5,rep(6,15),rep(7,12),8,rep(9,24),rep(10,50))))
ggplot() + geom_boxplot(data=df.plot, aes(x,y)) +
geom_label(data=df.labels, aes(x,y,label=label), fontface="bold") +
geom_rect(aes(xmin=-Inf, xmax=Inf, ymin=25, ymax=Inf), alpha = I(0.2), fill="#4b2e83") +
scale_x_discrete(breaks=c(1,5,10), labels=c("1"="Low", "5"="Medium", "10"="High")) +
theme_bw(base_size = 48) + theme(panel.grid.major = element_blank()) + ylab("Human Pilot\nPreparedness") +
xlab("Probability of Event Occurence")
library(ggplot2)
set.seed(10)  #setting a seed will ensure you have reproducible results each time.
y1<- rnorm(n=12, mean=18, sd=15)  #landing on hudson
y2<-rnorm(n=60, mean=30, sd=4) #engine failure
y4<-rnorm(n=12, mean=23, sd=11)  #laser blindness
set.seed(10)
y6<- rnorm(n=15, mean=23, sd=9) #lightning
set.seed(10)
y7<- rnorm(n=12, mean=28, sd=9) #excess turbulence
set.seed(10)
#y30<-rnorm(n=24, mean=28, sd=8) #wildlife strike
set.seed(10)
y9<-rnorm(n=24, mean=28, sd=6)
set.seed(10)
y10<-rnorm(n=50, mean=30, sd=4.5)
set.seed(10)
df.labels <- data.frame(x=c(1,2,4,6,7,9,10), y=c(0,20,5,7.5,13,14,19), label=c("Landing\n on Hudson","Engine\nfailure","Laser\nblindness","Lightning","Excess\nturbulence","Wildlife\nstrike","Passenger\ndisturbance"))
df.plot <- data.frame(y=c(y1,y2,NA,y4,NA,y6,y7,NA,y9,y10), x=factor(c(rep(1,12),rep(2,60),3,rep(4,12),5,rep(6,15),rep(7,12),8,rep(9,24),rep(10,50))))
ggplot() + geom_boxplot(data=df.plot, aes(x,y)) +
geom_label(data=df.labels, aes(x,y,label=label), fontface="bold") +
geom_rect(aes(xmin=-Inf, xmax=Inf, ymin=25, ymax=Inf), alpha = I(0.2), fill="#4b2e83") +
scale_x_discrete(breaks=c(1,5,10), labels=c("1"="Low", "5"="Medium", "10"="High")) +
theme_bw(base_size = 48) + theme(panel.grid.major = element_blank()) + ylab("Human Pilot\nPreparedness") +
xlab("Probability of Event Occurence")
library(ggplot2)
set.seed(10)  #setting a seed will ensure you have reproducible results each time.
y1<- rnorm(n=12, mean=18, sd=15)  #landing on hudson
y2<-rnorm(n=60, mean=30, sd=4) #engine failure
y4<-rnorm(n=12, mean=23, sd=11)  #laser blindness
set.seed(10)
y6<- rnorm(n=15, mean=23, sd=9) #lightning
set.seed(10)
y7<- rnorm(n=12, mean=28, sd=9) #excess turbulence
set.seed(10)
#y30<-rnorm(n=24, mean=28, sd=8) #wildlife strike
set.seed(10)
y9<-rnorm(n=24, mean=28, sd=6)
set.seed(10)
y10<-rnorm(n=50, mean=30, sd=4.5)
set.seed(10)
df.labels <- data.frame(x=c(1,2,4,6,7,9,10), y=c(0,20,5,7.5,13,14,19), label=c("Landing\n on Hudson","Engine\nfailure","Laser\nblindness","Lightning","Excess\nturbulence","Wildlife\nstrike","Passenger\ndisturbance"))
df.plot <- data.frame(y=c(y1,y2,NA,y4,NA,y6,y7,NA,y9,y10), x=factor(c(rep(1,12),rep(2,60),3,rep(4,12),5,rep(6,15),rep(7,12),8,rep(9,24),rep(10,50))))
ggplot() + geom_boxplot(data=df.plot, aes(x,y)) +
geom_label(data=df.labels, aes(x,y,label=label), fontface="bold") +
geom_rect(aes(xmin=-Inf, xmax=Inf, ymin=25, ymax=Inf), alpha = I(0.2), fill="#4b2e83") +
scale_x_discrete(breaks=c(1,5,10), labels=c("1"="Low", "5"="Medium", "10"="High")) +
theme_bw(base_size = 54) + theme(panel.grid.major = element_blank()) + ylab("Human Pilot\nPreparedness") +
xlab("Probability of Event Occurence")
library(ggplot2)
set.seed(10)  #setting a seed will ensure you have reproducible results each time.
y1<- rnorm(n=12, mean=18, sd=15)  #landing on hudson
y2<-rnorm(n=60, mean=30, sd=4) #engine failure
y4<-rnorm(n=12, mean=23, sd=11)  #laser blindness
set.seed(10)
y6<- rnorm(n=15, mean=23, sd=9) #lightning
set.seed(10)
y7<- rnorm(n=12, mean=28, sd=9) #excess turbulence
set.seed(10)
#y30<-rnorm(n=24, mean=28, sd=8) #wildlife strike
set.seed(10)
y9<-rnorm(n=24, mean=28, sd=6)
set.seed(10)
y10<-rnorm(n=50, mean=30, sd=4.5)
set.seed(10)
df.labels <- data.frame(x=c(1,2,4,6,7,9,10), y=c(0,20,5,7.5,13,14,19), label=c("Landing\n on Hudson","Engine\nfailure","Laser\nblindness","Lightning","Excess\nturbulence","Wildlife\nstrike","Passenger\ndisturbance"))
df.plot <- data.frame(y=c(y1,y2,NA,y4,NA,y6,y7,NA,y9,y10), x=factor(c(rep(1,12),rep(2,60),3,rep(4,12),5,rep(6,15),rep(7,12),8,rep(9,24),rep(10,50))))
ggplot() + geom_boxplot(data=df.plot, aes(x,y)) +
geom_label(data=df.labels, aes(x,y,label=label), fontface="bold") +
geom_rect(aes(xmin=-Inf, xmax=Inf, ymin=25, ymax=Inf), alpha = I(0.2), fill="#4b2e83") +
scale_x_discrete(breaks=c(1,5,10), labels=c("1"="Low", "5"="Medium", "10"="High")) +
theme_bw(base_size = 54) + theme(panel.grid.major = element_blank()) + ylab("Human Pilot\nPreparedness") +
xlab("Probability of Event Occurence")
library(ggplot2)
set.seed(10)  #setting a seed will ensure you have reproducible results each time.
y1<- rnorm(n=12, mean=18, sd=15)  #landing on hudson
y2<-rnorm(n=60, mean=30, sd=4) #engine failure
y4<-rnorm(n=12, mean=23, sd=11)  #laser blindness
set.seed(10)
y6<- rnorm(n=15, mean=23, sd=9) #lightning
set.seed(10)
y7<- rnorm(n=12, mean=28, sd=9) #excess turbulence
set.seed(10)
#y30<-rnorm(n=24, mean=28, sd=8) #wildlife strike
set.seed(10)
y9<-rnorm(n=24, mean=28, sd=6)
set.seed(10)
y10<-rnorm(n=50, mean=30, sd=4.5)
set.seed(10)
df.labels <- data.frame(x=c(1,2,4,6,7,9,10), y=c(0,20,5,7.5,13,14,19), label=c("Landing\n on Hudson","Engine\nfailure","Laser\nblindness","Lightning","Excess\nturbulence","Wildlife\nstrike","Passenger\ndisturbance"))
df.plot <- data.frame(y=c(y1,y2,NA,y4,NA,y6,y7,NA,y9,y10), x=factor(c(rep(1,12),rep(2,60),3,rep(4,12),5,rep(6,15),rep(7,12),8,rep(9,24),rep(10,50))))
ggplot() + geom_boxplot(data=df.plot, aes(x,y)) +
geom_label(data=df.labels, aes(x,y,label=label), fontface="bold") +
geom_rect(aes(xmin=-Inf, xmax=Inf, ymin=25, ymax=Inf), alpha = I(0.1), fill="#4b2e83") +
scale_x_discrete(breaks=c(1,5,10), labels=c("1"="Low", "5"="Medium", "10"="High")) +
theme_bw(base_size = 48) + theme(panel.grid.major = element_blank()) + ylab("Human Pilot\nPreparedness") +
xlab("Probability of Event Occurence")
#BIC
#this function uses 'glm' to fit a logistic regression
#and returns the BIC = deviance + log(SampleSize)*NumberOfRegressionCoefficients
getLogisticBIC <- function(response,explanatory,data)
{
#check if the regression has no explanatory variables
if(0==length(explanatory))
{
#regression with no explanatory variables
deviance = glm(data[,response] ~ 1,family=binomial(link=logit))$deviance;
}
else
{
#regression with at least one explanatory variable
deviance = glm(data[,response] ~ as.matrix(data[,as.numeric(explanatory)]),
family=binomial(link=logit))$deviance;
}
return(deviance+log(nrow(data))*(1+length(explanatory)));
}
#Problem 1
#this function uses 'glm' to fit a logistic regression
#and returns the AIC = deviance + 2*NumberOfRegressionCoefficients
getLogisticAIC <- function(response,explanatory,data)
{
#check if the regression has no explanatory variables
if(0==length(explanatory))
{
#regression with no explanatory variables
deviance = glm(data[,response] ~ 1,family=binomial(link=logit))$deviance
}
else
{
#regression with at least one explanatory variable
deviance = glm(data[,response] ~ as.matrix(data[,as.numeric(explanatory)]),
family=binomial(link=logit))$deviance
}
return(deviance+2*(1+length(explanatory)))
}
#Problem 2
#Function takes the data and the response variable
#Return the model with the min AIC and the AIC value
greedyForwardLogReg <- function(response, data, criteriaFUN) {
#Define current model and get no empty model AIC
currentModel = c()
currentAIC = criteriaFUN(response, currentModel, data)
#Available variables left to choose from
availVariables = seq(dim(as.matrix(data))[2]-1)
#For loop to make sure it will always end after 1 loop through all available variables
for (i in availVariables) {
#Case where current model has no explanatory variables
if (length(currentModel)==0) {
#Get AIC for all models by adding a single explantory variable
availAIC = sapply(availVariables, criteriaFUN, response=response, data=data)
#Check to see if currentAIC is less than or equal to AIC of adding 1 explantory variable
if (currentAIC <= min(availAIC)) {
return(list(currentModel, currentAIC))
}
#Else update current model to and current AIC
else {
currentModel = c(currentModel, which.min(availAIC))
currentAIC = min(availAIC)
availVariables = setdiff(availVariables, currentModel)
}
}
#Main routine of adding 1 var and checking to see if AIC is reduced
else {
#Create matrix where each column is a model of adding 1 explanatory variable
availModels = sapply(availVariables, union, currentModel)
#Get AIC
availAIC = apply(availModels, MARGIN=2, criteriaFUN, response=response, data=data)
#Check to see if min is reached
if (currentAIC <= min(availAIC)) {
return(list(sort(currentModel), currentAIC))
}
else {
currentModel = availModels[,which.min(availAIC)]
currentAIC = min(availAIC)
availVariables = setdiff(availVariables, currentModel)
}
}
}
#If it hits this return, the model has all the explanatory variables and will just return
return(list(sort(currentModel), currentAIC))
}
#Problem 3
#Function takes the data and the response variable
#Return the model with the min AIC and the AIC value
greedyBackwardLogReg <- function(response, data, criteriaFUN) {
#Define current model and get no empty model AIC
currentModel = seq(dim(as.matrix(data))[2]-1)
currentAIC = criteriaFUN(response, currentModel, data)
#Available variables left to choose from
availVariables = seq(dim(as.matrix(data))[2]-1)
#For loop to make sure it will always end after 1 loop through all available variables
for (i in availVariables) {
availModels = sapply(availVariables, setdiff, x=currentModel)
availAIC = apply(availModels, MARGIN=2, criteriaFUN, response=response, data=data)
#Check to see if min is reached
if (currentAIC <= min(availAIC)) {
return(list(sort(currentModel), currentAIC))
}
else {
currentModel = availModels[,which.min(availAIC)]
currentAIC = min(availAIC)
availVariables = intersect(availVariables, currentModel)
}
}
#If it hits this return, the model has none of the explanatory variables and will just return
return(list(sort(currentModel), currentAIC))
}
#Main routine for problem 4
main <- function(data) {
df.data <- read.csv(file=data, sep="\t", header=F)
response = ncol(df.data)
model_p2 = greedyForwardLogReg(response, df.data, getLogisticAIC)
print("Forward greedy algorithm using AIC:\n")
print(model_p2)
model_p3 = greedyBackwardLogReg(response, df.data, getLogisticAIC)
print("Backward greedy algorithm using AIC:\n")
print(model_p3)
model_p2 = greedyForwardLogReg(response, df.data, getLogisticBIC)
print("Forward greedy algorithm using BIC:\n")
print(model_p2)
model_p3 = greedyBackwardLogReg(response, df.data, getLogisticBIC)
print("Backward greedy algorithm using BIC:\n")
print(model_p3)
}
main("C:\\Users\\shwan\\OneDrive\\Documents\\Classes\\STATS 534\\HW\\2\\534binarydata.txt")
warnings()
test = matrix
test = matrix(data = (2,1,6,9), nrow=2, ncol=2)
test = matrix(data = [2,1,6,9], nrow=2, ncol=2)
?matrix
test = matrix(data = c(2,1,6,9), nrow=2, ncol=2)
eig
eigen(test)
eigen(test)$vectors
eigen(test)$vectors %*% eigen(test)$vectors
eigen(test)$vectors %*% eigen(test)$vectors.T
eigen(test)$vectors %*% T(eigen(test)$vectors)
eigen(test)$vectors %*% t(eigen(test)$vectors)
norm(eigen(test)$vectors %*% t(eigen(test)$vectors))
norm(eigen(test)$vectors %*% eigen(test)$vectors)
test = matrix(data = c(2,1,1,2), nrow=2, ncol=2)
test
eigen(test)
eigen(test+2)
test+2
test+matrix(c(0,1,1,0), nrow=2)
eigen(test+matrix(c(0,1,1,0), nrow=2))
eigen(test+matrix(c(1,0,0,1), nrow=2))
eigen(test*2)
eigen(test)
eigen(test2*)
test %*% test
eigen(test)$vectors
eigen(test)$vectors[:,1]
eigen(test)$vectors[1]
eigen(test)$vectors[1,1]
eigen(test)$vectors[,1]
norm(eigen(test)$vectors[,1])
sum(eigen(test)$vectors[,1]^2)
sum(eigen(test)$vectors[,2]^2)
sum(eigen(test)$vectors[,2]^2)
sum(eigen(test)$vectors^2)
eigen(test)$vectors[,1] %*% eigen(test)$vectors[,1]
eigen(test)$vectors[,1] %*% t(eigen(test)$vectors[,1])
(eigen(test)$vectors[,1] %*% t(eigen(test)$vectors[,1]))%*%(eigen(test)$vectors[,1] %*% t(eigen(test)$vectors[,1]))
(eigen(test)$vectors[,1] %*% t(eigen(test)$vectors[,1]))%*%(eigen(test)$vectors[,1] %*% t(eigen(test)$vectors[,2]))
(eigen(test)$vectors[,1] %*% t(eigen(test)$vectors[,1]))%*%(eigen(test)$vectors[,1] %*% t(eigen(test)$vectors[,2])) + (eigen(test)$vectors[,1] %*% t(eigen(test)$vectors[,1]))%*%(eigen(test)$vectors[,1] %*% t(eigen(test)$vectors[,1]))
test=matrix(c(23,12,12,23), nrow=2)
test
eigen(test)
eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%eigen(test)$vectors[,1]
eigen(test)$vectors[,1]%*%t(eigen(test)$vectors[,1])
install.packages('ggplot2')
devtools
install.packages("devtools.zip", repos = NULL)
install.packages("devtools", repos = NULL)
install.packages("devtools")
devtools::install_github('ayayron/shinydnd')
devtools::install_github('ayayron/shinydnd')
library(shinyDND)
install.packages("devtools")
install.packages("devtools")
devtools::install_github('ayayron/shinydnd')
devtools::install_github('ayayron/shinydnd')
Sys.getenv("R_LIBS_USER")
library(devtools)
devtools::install_github('ayayron/shinydnd')
library("devtools", lib.loc="~/R/win-library/3.5")
remove.packages("devtools", lib="~/R/win-library/3.5")
install.packages("devtools")
devtools::install_github('ayayron/shinydnd')
library(shinyDND)
shiny::runApp('shiny/demo/ScenarioScore')
runApp('shiny/demo/ScenarioScore')
runApp('shiny/demo/ScenarioScore')
runApp('shiny/demo/ScenarioScore')
runApp('shiny/demo/ScenarioScore')
runApp('shiny/demo/ScenarioScore')
seq(1,10)
len(elemList)
elemList
elemList = seq(1,10)
len(elemList)
size(elemList)
length(elemList)
1:length(elemList)
runApp('shiny/demo/ScenarioScore')
runApp('shiny/demo/ScenarioScore')
runApp('shiny/demo/ScenarioScore')
1++
runApp('shiny/demo/ScenarioScore')
runApp('shiny/demo/ScenarioScore')
runApp('shiny/demo/ScenarioScore')
runApp('shiny/demo/ScenarioScore')
runApp('shiny/demo/ScenarioScore')
runApp('shiny/demo/ScenarioScore')
# preamble
library(plyr)
library(dplyr)
library(tidyverse)
library(reshape2)
# feed in data
setwd("")
plane_crash <- read.csv("plane_crash_v2.csv", header=TRUE)
flight_time <- read.csv("flight_time.csv", header=TRUE)
# data transformations
plane_crash$date <- as.POSIXct(plane_crash$date, format = "%d-%b-%Y")
############## SCENARIO GROUP AGGREGATION ##############
# function to aggregate scenarios to groups and add to dataframe, no input parameter needed
add_scenario_group <- function(data){
data[,ncol(data)+1] <- NA
colnames(data) <- c(colnames(data[,1:ncol(data)-1]),"group")
# Assign every accident reason to broader categories for analysis
data[grep("Airframe",data$accident_type),]$group <- "Airframe"
data[grep("Engines",data$accident_type),]$group <- "Engines"
data[grep("Flight control surfaces",data$accident_type),]$group <- "Flight control surfaces"
data[grep("Instruments",data$accident_type),]$group <- "Instruments"
data[grep("Pressurization",data$accident_type),]$group <- "Pressurization"
data[grep("Systems",data$accident_type),]$group <- "Systems"
data[grep("Cargo",data$accident_type),]$group <- "Cargo"
data[grep("Collision",data$accident_type),]$group <- "Collision"
data[grep("External factors",data$accident_type),]$group <- "External factors"
data[grep("Fire",data$accident_type),]$group <- "Fire"
data[grep("Flightcrew",data$accident_type),]$group <- "Flightcrew"
data[grep("Landing/takeoff",data$accident_type),]$group <- "Landing/takeoff"
data[grep("Maintenance",data$accident_type),]$group <- "Maintenance"
data[grep("Result",data$accident_type),]$group <- "Result"
data[grep("Security",data$accident_type),]$group <- "Security"
data[grep("Undercarriage",data$accident_type),]$group <- "Undercarriage"
data[grep("ATC & navigation",data$accident_type),]$group <- "ATC & navigation"
# set the group data field as a factor
data$group <- as.factor(data$group)
return(data)
}
getwd()
ls()
dir
Rscript
thisfile()
rstudioapi::getSourceEditorContext()$path
setwd(rstudioapi::getSourceEditorContext()$path)
dirname(rstudioapi::getSourceEditorContext()$path)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# preamble
library(plyr)
library(dplyr)
library(tidyverse)
library(reshape2)
# feed in data
setwd("")
plane_crash <- read.csv("plane_crash_v2.csv", header=TRUE)
flight_time <- read.csv("flight_time.csv", header=TRUE)
# data transformations
plane_crash$date <- as.POSIXct(plane_crash$date, format = "%d-%b-%Y")
############## SCENARIO GROUP AGGREGATION ##############
# function to aggregate scenarios to groups and add to dataframe, no input parameter needed
add_scenario_group <- function(data){
data[,ncol(data)+1] <- NA
colnames(data) <- c(colnames(data[,1:ncol(data)-1]),"group")
# Assign every accident reason to broader categories for analysis
data[grep("Airframe",data$accident_type),]$group <- "Airframe"
data[grep("Engines",data$accident_type),]$group <- "Engines"
data[grep("Flight control surfaces",data$accident_type),]$group <- "Flight control surfaces"
data[grep("Instruments",data$accident_type),]$group <- "Instruments"
data[grep("Pressurization",data$accident_type),]$group <- "Pressurization"
data[grep("Systems",data$accident_type),]$group <- "Systems"
data[grep("Cargo",data$accident_type),]$group <- "Cargo"
data[grep("Collision",data$accident_type),]$group <- "Collision"
data[grep("External factors",data$accident_type),]$group <- "External factors"
data[grep("Fire",data$accident_type),]$group <- "Fire"
data[grep("Flightcrew",data$accident_type),]$group <- "Flightcrew"
data[grep("Landing/takeoff",data$accident_type),]$group <- "Landing/takeoff"
data[grep("Maintenance",data$accident_type),]$group <- "Maintenance"
data[grep("Result",data$accident_type),]$group <- "Result"
data[grep("Security",data$accident_type),]$group <- "Security"
data[grep("Undercarriage",data$accident_type),]$group <- "Undercarriage"
data[grep("ATC & navigation",data$accident_type),]$group <- "ATC & navigation"
# set the group data field as a factor
data$group <- as.factor(data$group)
return(data)
}
plane_crash <- add_scenario_group(plane_crash)
View(plane_crash)
write.csv(plane_crash, file="plane_crash_v2.csv")
write.csv(plane_crash, file="plane_crash_v2.csv", row.names = FALSE)
